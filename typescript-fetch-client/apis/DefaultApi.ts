/* tslint:disable */
/* eslint-disable */
/**
 * Cats example
 * The cats API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface BagsControllerUpdateToInComveyRequest {
    id: string;
}

export interface BagsControllerUpdateToInConsumerRequest {
    id: string;
    consumerId: string;
    body: object;
}

export interface BagsControllerUpdateToInECRequest {
    id: string;
    body: object;
}

export interface CouponsControllerFindAllRequest {
    consumerId: string;
}

export interface CouponsControllerFindOneRequest {
    consumerId: string;
    couponCode: string;
}

export interface CouponsControllerUseRequest {
    consumerId: string;
    couponCode: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async bagsControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bags`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async bagsControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.bagsControllerFindAllRaw(initOverrides);
    }

    /**
     */
    async bagsControllerUpdateToInComveyRaw(requestParameters: BagsControllerUpdateToInComveyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling bagsControllerUpdateToInComvey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bags/{id}/in-comvey`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async bagsControllerUpdateToInComvey(requestParameters: BagsControllerUpdateToInComveyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.bagsControllerUpdateToInComveyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async bagsControllerUpdateToInConsumerRaw(requestParameters: BagsControllerUpdateToInConsumerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling bagsControllerUpdateToInConsumer.');
        }

        if (requestParameters.consumerId === null || requestParameters.consumerId === undefined) {
            throw new runtime.RequiredError('consumerId','Required parameter requestParameters.consumerId was null or undefined when calling bagsControllerUpdateToInConsumer.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling bagsControllerUpdateToInConsumer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/bags/{id}/{consumerId}/in-consumer`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"consumerId"}}`, encodeURIComponent(String(requestParameters.consumerId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async bagsControllerUpdateToInConsumer(requestParameters: BagsControllerUpdateToInConsumerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.bagsControllerUpdateToInConsumerRaw(requestParameters, initOverrides);
    }

    /**
     */
    async bagsControllerUpdateToInECRaw(requestParameters: BagsControllerUpdateToInECRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling bagsControllerUpdateToInEC.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling bagsControllerUpdateToInEC.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/bags/{id}/in-ec`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async bagsControllerUpdateToInEC(requestParameters: BagsControllerUpdateToInECRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.bagsControllerUpdateToInECRaw(requestParameters, initOverrides);
    }

    /**
     */
    async couponsControllerFindAllRaw(requestParameters: CouponsControllerFindAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.consumerId === null || requestParameters.consumerId === undefined) {
            throw new runtime.RequiredError('consumerId','Required parameter requestParameters.consumerId was null or undefined when calling couponsControllerFindAll.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/coupons/{consumerId}`.replace(`{${"consumerId"}}`, encodeURIComponent(String(requestParameters.consumerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async couponsControllerFindAll(requestParameters: CouponsControllerFindAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.couponsControllerFindAllRaw(requestParameters, initOverrides);
    }

    /**
     */
    async couponsControllerFindOneRaw(requestParameters: CouponsControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.consumerId === null || requestParameters.consumerId === undefined) {
            throw new runtime.RequiredError('consumerId','Required parameter requestParameters.consumerId was null or undefined when calling couponsControllerFindOne.');
        }

        if (requestParameters.couponCode === null || requestParameters.couponCode === undefined) {
            throw new runtime.RequiredError('couponCode','Required parameter requestParameters.couponCode was null or undefined when calling couponsControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/coupons/{consumerId}/{couponCode}`.replace(`{${"consumerId"}}`, encodeURIComponent(String(requestParameters.consumerId))).replace(`{${"couponCode"}}`, encodeURIComponent(String(requestParameters.couponCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async couponsControllerFindOne(requestParameters: CouponsControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.couponsControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async couponsControllerUseRaw(requestParameters: CouponsControllerUseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.consumerId === null || requestParameters.consumerId === undefined) {
            throw new runtime.RequiredError('consumerId','Required parameter requestParameters.consumerId was null or undefined when calling couponsControllerUse.');
        }

        if (requestParameters.couponCode === null || requestParameters.couponCode === undefined) {
            throw new runtime.RequiredError('couponCode','Required parameter requestParameters.couponCode was null or undefined when calling couponsControllerUse.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/coupons/{consumerId}/{couponCode}`.replace(`{${"consumerId"}}`, encodeURIComponent(String(requestParameters.consumerId))).replace(`{${"couponCode"}}`, encodeURIComponent(String(requestParameters.couponCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async couponsControllerUse(requestParameters: CouponsControllerUseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.couponsControllerUseRaw(requestParameters, initOverrides);
    }

    /**
     * 
     */
    async ecCompaniesControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ec-companies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     */
    async ecCompaniesControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ecCompaniesControllerFindAllRaw(initOverrides);
    }

}
